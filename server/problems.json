[
  {
    "id": 101,
    "title": "Sum of Two Numbers",
    "statement": "Given two integers A and B, output their sum.",
    "input_format": "Two integers A and B separated by space.",
    "output_format": "A single integer — the sum of A and B.",
    "constraints": "1 ≤ A, B ≤ 10^9",
    "sample_input": "3 5",
    "sample_output": "8",
    "explanation": "3 + 5 = 8",
    "tags": ["math", "implementation"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 102,
    "title": "Reverse a String",
    "statement": "Given a string S, print the string in reverse order.",
    "input_format": "A single string S (no spaces).",
    "output_format": "The reversed string.",
    "constraints": "1 ≤ |S| ≤ 1000",
    "sample_input": "hello",
    "sample_output": "olleh",
    "explanation": "Reversing 'hello' gives 'olleh'.",
    "tags": ["string", "implementation"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 103,
    "title": "Prime Checker",
    "statement": "Given a number N, check if it is prime.",
    "input_format": "A single integer N.",
    "output_format": "YES if N is prime, otherwise NO.",
    "constraints": "2 ≤ N ≤ 10^6",
    "sample_input": "7",
    "sample_output": "YES",
    "explanation": "7 has no divisors other than 1 and itself.",
    "tags": ["math", "number theory"],
    "difficulty": "Medium",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 104,
    "title": "Palindrome Check",
    "statement": "Given a string S, check if it is a palindrome.",
    "input_format": "A single string S (no spaces).",
    "output_format": "YES if S is palindrome, otherwise NO.",
    "constraints": "1 ≤ |S| ≤ 1000",
    "sample_input": "madam",
    "sample_output": "YES",
    "explanation": "'madam' reads the same forward and backward.",
    "tags": ["string", "implementation"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 105,
    "title": "Factorial",
    "statement": "Given an integer N, find its factorial.",
    "input_format": "A single integer N.",
    "output_format": "The factorial of N.",
    "constraints": "0 ≤ N ≤ 20",
    "sample_input": "5",
    "sample_output": "120",
    "explanation": "5! = 1×2×3×4×5 = 120",
    "tags": ["math", "recursion"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 106,
    "title": "GCD of Two Numbers",
    "statement": "Find the greatest common divisor of two integers A and B.",
    "input_format": "Two integers A and B separated by space.",
    "output_format": "The GCD of A and B.",
    "constraints": "1 ≤ A, B ≤ 10^9",
    "sample_input": "12 18",
    "sample_output": "6",
    "explanation": "GCD(12, 18) = 6",
    "tags": ["math", "number theory"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 107,
    "title": "Fibonacci Number",
    "statement": "Given an integer N, print the Nth Fibonacci number (0-indexed).",
    "input_format": "A single integer N.",
    "output_format": "The Nth Fibonacci number.",
    "constraints": "0 ≤ N ≤ 50",
    "sample_input": "7",
    "sample_output": "13",
    "explanation": "Sequence: 0,1,1,2,3,5,8,13,...",
    "tags": ["math", "dynamic programming"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 108,
    "title": "Array Sum",
    "statement": "Given N integers, output their sum.",
    "input_format": "First line: N. Second line: N integers separated by space.",
    "output_format": "Sum of all integers.",
    "constraints": "1 ≤ N ≤ 10^5, |Ai| ≤ 10^9",
    "sample_input": "5\n1 2 3 4 5",
    "sample_output": "15",
    "explanation": "1+2+3+4+5 = 15",
    "tags": ["array", "implementation"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 109,
    "title": "Second Largest Number",
    "statement": "Find the second largest number in a list of N integers.",
    "input_format": "First line: N. Second line: N integers.",
    "output_format": "Second largest integer.",
    "constraints": "2 ≤ N ≤ 10^5",
    "sample_input": "5\n1 3 4 2 5",
    "sample_output": "4",
    "explanation": "Largest is 5, second largest is 4.",
    "tags": ["array", "sorting"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 110,
    "title": "Count Vowels",
    "statement": "Count the number of vowels in a string S.",
    "input_format": "A single string S.",
    "output_format": "Number of vowels in S.",
    "constraints": "1 ≤ |S| ≤ 10^5",
    "sample_input": "hello",
    "sample_output": "2",
    "explanation": "'e' and 'o' are vowels.",
    "tags": ["string", "implementation"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 111,
    "title": "Binary to Decimal",
    "statement": "Convert a binary string to its decimal value.",
    "input_format": "A binary string.",
    "output_format": "Decimal equivalent.",
    "constraints": "1 ≤ |S| ≤ 32",
    "sample_input": "101",
    "sample_output": "5",
    "explanation": "Binary 101 = Decimal 5.",
    "tags": ["math", "binary"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 112,
    "title": "Sum of Digits",
    "statement": "Find the sum of digits of a given integer N.",
    "input_format": "A single integer N.",
    "output_format": "Sum of digits of N.",
    "constraints": "0 ≤ N ≤ 10^18",
    "sample_input": "12345",
    "sample_output": "15",
    "explanation": "1+2+3+4+5 = 15",
    "tags": ["math", "implementation"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 113,
    "title": "Matrix Transpose",
    "statement": "Given an N×M matrix, print its transpose.",
    "input_format": "First line: N M. Next N lines: M integers each.",
    "output_format": "Transpose matrix.",
    "constraints": "1 ≤ N, M ≤ 100",
    "sample_input": "2 3\n1 2 3\n4 5 6",
    "sample_output": "1 4\n2 5\n3 6",
    "explanation": "Rows become columns.",
    "tags": ["matrix", "implementation"],
    "difficulty": "Medium",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 114,
    "title": "Merge Two Sorted Arrays",
    "statement": "Given two sorted arrays, merge them into one sorted array.",
    "input_format": "First line: N M. Second line: N integers. Third line: M integers.",
    "output_format": "Merged sorted array.",
    "constraints": "1 ≤ N, M ≤ 10^5",
    "sample_input": "3 3\n1 4 7\n2 5 6",
    "sample_output": "1 2 4 5 6 7",
    "explanation": "Merge maintaining sorted order.",
    "tags": ["array", "two-pointer"],
    "difficulty": "Medium",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 115,
    "title": "Count Distinct Elements",
    "statement": "Count the number of distinct integers in a list.",
    "input_format": "First line: N. Second line: N integers.",
    "output_format": "Number of distinct integers.",
    "constraints": "1 ≤ N ≤ 10^5",
    "sample_input": "5\n1 2 2 3 1",
    "sample_output": "3",
    "explanation": "Unique integers are {1, 2, 3}.",
    "tags": ["array", "set"],
    "difficulty": "Medium",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 116,
    "title": "Balanced Parentheses",
    "statement": "Check if a given string of parentheses is balanced.",
    "input_format": "A string containing only '(', ')', '{', '}', '[', ']'.",
    "output_format": "YES if balanced, otherwise NO.",
    "constraints": "1 ≤ |S| ≤ 10^5",
    "sample_input": "{[()]}",
    "sample_output": "YES",
    "explanation": "All brackets match in correct order.",
    "tags": ["stack", "string"],
    "difficulty": "Medium",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 117,
    "title": "DFS in Graph",
    "statement": "Perform depth-first search on a graph starting from a given node.",
    "input_format": "First line: N M. Next M lines: edges u v. Last line: starting node.",
    "output_format": "DFS traversal order.",
    "constraints": "1 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5",
    "sample_input": "4 3\n1 2\n2 3\n1 4\n1",
    "sample_output": "1 2 3 4",
    "explanation": "DFS starting at 1 visits 2→3→4.",
    "tags": ["graph", "dfs"],
    "difficulty": "Medium",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 118,
    "title": "Knapsack Problem",
    "statement": "Given weights and values of N items, find the maximum value in a knapsack of capacity W.",
    "input_format": "First line: N W. Next N lines: wi vi.",
    "output_format": "Maximum achievable value.",
    "constraints": "1 ≤ N ≤ 100, 1 ≤ W ≤ 1000",
    "sample_input": "3 50\n10 60\n20 100\n30 120",
    "sample_output": "220",
    "explanation": "Choose items with weights 20 and 30.",
    "tags": ["dynamic programming", "knapsack"],
    "difficulty": "Hard",
    "time_limit": 2,
    "memory_limit": 256
  },
  {
    "id": 119,
    "title": "Dijkstra's Algorithm",
    "statement": "Find the shortest path from a starting node to all other nodes using Dijkstra's algorithm.",
    "input_format": "First line: N M. Next M lines: u v w. Last line: starting node.",
    "output_format": "Shortest distances from starting node.",
    "constraints": "1 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5",
    "sample_input": "5 6\n1 2 2\n1 3 4\n2 3 1\n2 4 7\n3 5 3\n4 5 1\n1",
    "sample_output": "0 2 3 9 6",
    "explanation": "Distances in order from node 1.",
    "tags": ["graph", "shortest path"],
    "difficulty": "Hard",
    "time_limit": 2,
    "memory_limit": 256
  },
{
    "id": 201,
    "title": "Calculate Average",
    "statement": "Given N integers, calculate their average.",
    "input_format": "First line: N. Second line: N integers separated by space.",
    "output_format": "Average as a floating-point number.",
    "constraints": "1 ≤ N ≤ 1000, |Ai| ≤ 10^6",
    "sample_input": "5\n2 4 6 8 10",
    "sample_output": "6.0",
    "explanation": "Average is (2+4+6+8+10)/5 = 6.0",
    "tags": ["array", "math"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 202,
    "title": "Check Leap Year",
    "statement": "Given a year, check if it is a leap year.",
    "input_format": "A single integer year.",
    "output_format": "YES if leap year, otherwise NO.",
    "constraints": "1900 ≤ year ≤ 3000",
    "sample_input": "2024",
    "sample_output": "YES",
    "explanation": "2024 is divisible by 4 and not 100.",
    "tags": ["math", "conditional"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 203,
    "title": "Find Maximum Consecutive Ones",
    "statement": "Given a binary array, find the maximum number of consecutive 1s.",
    "input_format": "First line: N. Second line: N space-separated 0s and 1s.",
    "output_format": "Maximum consecutive 1s count.",
    "constraints": "1 ≤ N ≤ 10^5",
    "sample_input": "8\n1 1 0 1 1 1 0 1",
    "sample_output": "3",
    "explanation": "Maximum consecutive ones are three in a row.",
    "tags": ["array", "string"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 204,
    "title": "Count Words in Sentence",
    "statement": "Count the number of words in a given sentence.",
    "input_format": "A single line string S.",
    "output_format": "Number of words.",
    "constraints": "1 ≤ |S| ≤ 1000",
    "sample_input": "Hello world this is AI assistant",
    "sample_output": "6",
    "explanation": "There are 6 words separated by spaces.",
    "tags": ["string"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 205,
    "title": "Check Armstrong Number",
    "statement": "Check if a number is an Armstrong number.",
    "input_format": "A single integer N.",
    "output_format": "YES if Armstrong, otherwise NO.",
    "constraints": "1 ≤ N ≤ 10^5",
    "sample_input": "153",
    "sample_output": "YES",
    "explanation": "153 = 1^3 + 5^3 + 3^3 = 153",
    "tags": ["math", "number theory"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 206,
    "title": "Calculate Power",
    "statement": "Calculate A raised to the power B.",
    "input_format": "Two integers A and B.",
    "output_format": "Value of A^B.",
    "constraints": "0 ≤ A ≤ 10^5, 0 ≤ B ≤ 10^5",
    "sample_input": "2 3",
    "sample_output": "8",
    "explanation": "2^3 = 8",
    "tags": ["math"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 207,
    "title": "Remove Duplicates from Array",
    "statement": "Remove duplicates from an integer array.",
    "input_format": "First line: N. Second line: N integers.",
    "output_format": "Array without duplicates in original order.",
    "constraints": "1 ≤ N ≤ 10^5",
    "sample_input": "6\n1 2 2 3 4 3",
    "sample_output": "1 2 3 4",
    "explanation": "Duplicates 2 and 3 are removed.",
    "tags": ["array", "set"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 208,
    "title": "Check Anagram",
    "statement": "Check if two strings are anagrams.",
    "input_format": "Two strings S1 and S2.",
    "output_format": "YES if anagrams, otherwise NO.",
    "constraints": "1 ≤ |S1|, |S2| ≤ 1000",
    "sample_input": "listen silent",
    "sample_output": "YES",
    "explanation": "'listen' and 'silent' have same characters.",
    "tags": ["string", "sorting"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 209,
    "title": "Find Missing Number in Sequence",
    "statement": "Given N-1 numbers from 1 to N, find the missing number.",
    "input_format": "First line: N. Second line: N-1 integers.",
    "output_format": "The missing number.",
    "constraints": "1 ≤ N ≤ 10^5",
    "sample_input": "5\n1 2 3 5",
    "sample_output": "4",
    "explanation": "4 is missing from the sequence.",
    "tags": ["array", "math"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 210,
    "title": "Find Intersection of Two Arrays",
    "statement": "Find common elements between two arrays.",
    "input_format": "First line: N M. Second line: N integers. Third line: M integers.",
    "output_format": "Common elements sorted ascending.",
    "constraints": "1 ≤ N, M ≤ 10^5",
    "sample_input": "5 4\n1 2 3 4 5\n3 4 6 7",
    "sample_output": "3 4",
    "explanation": "Common elements are 3 and 4.",
    "tags": ["array", "set", "sorting"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 211,
    "title": "Check Perfect Number",
    "statement": "Given a number, check if it is perfect.",
    "input_format": "A single integer N.",
    "output_format": "YES if perfect number, otherwise NO.",
    "constraints": "1 ≤ N ≤ 10^6",
    "sample_input": "28",
    "sample_output": "YES",
    "explanation": "28 is equal to sum of its divisors 1+2+4+7+14.",
    "tags": ["math", "number theory"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 212,
    "title": "Convert Decimal to Binary",
    "statement": "Convert a decimal integer to binary.",
    "input_format": "A single integer N.",
    "output_format": "Binary representation.",
    "constraints": "0 ≤ N ≤ 10^9",
    "sample_input": "10",
    "sample_output": "1010",
    "explanation": "Decimal 10 in binary is 1010.",
    "tags": ["math", "binary"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 213,
    "title": "Count Character Frequency",
    "statement": "Count the frequency of each character in a string.",
    "input_format": "A single string S.",
    "output_format": "Each character and count in order of appearance.",
    "constraints": "1 ≤ |S| ≤ 10^5",
    "sample_input": "hello",
    "sample_output": "h:1 e:1 l:2 o:1",
    "explanation": "Character 'l' appears twice, others once.",
    "tags": ["string", "hashmap"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  },
  {
    "id": 214,
    "title": "Sum of Even Numbers",
    "statement": "Find sum of even numbers in a list.",
    "input_format": "First line: N. Second line: N integers.",
    "output_format": "Sum of even integers.",
    "constraints": "1 ≤ N ≤ 10^5",
    "sample_input": "6\n1 2 3 4 5 6",
    "sample_output": "12",
    "explanation": "2+4+6=12",
    "tags": ["array", "math"],
    "difficulty": "Easy",
    "time_limit": 1,
    "memory_limit": 256
  }
]
